https://www.programiz.com/python-programming/json
https://www.geeksforgeeks.org/reading-and-writing-json-to-a-file-in-python/

JSON (JavaScript Object Notation) is a popular data format used for representing structured data. 
It's common to transmit and receive data between a server and web application in JSON format.

Simple Python objects are translated to JSON according to a fairly intuitive conversion.

Python			JSON
dict			object
list, tuple		array
str			string
int, float		number
True			true
False			false
None			null


Python Convert to JSON string - convert a dictionary to JSON string using json.dumps() method

Example : Convert python obect to JSON string 

import json
person_dict = {'name': 'Bob', 'age': 12, 'married': False, 'children': None, 'car' : None, 'student':True}
#person_dict = {'name': 'Bob', 'age': 42, 'married': True, 'children': ['sonu','tonu'], 'car': ('swift', 'wagonR'),  'student':False}
person_json_str = json.dumps(person_dict)
print(person_json_str) # {"name": "Bob", "age": 12, "married": false, "children": null, "car": null, "student": true}
#{"name": "Bob", "age": 42, "married": true, "children": ["sonu", "tonu"], "car": ["swift", "wagonR"], "student": false}

number_list = [1, 2, 3]
number_list_str = json.dumps(number_list)
print(number_list_str) # [1, 2, 3]

number_tuple = (1, 5, 3)
number_tuple_str = json.dumps(number_tuple)
print(number_tuple_str) #[1, 5, 3]

number = 12
number_str = json.dumps(number)
print(number_str) # 12

name = 'emexo'
name_str = json.dumps(name)
print(name_str) # "emexo"

bool1 = True
bool1_str = json.dumps(bool1)
print(bool1_str)#true

bool2 = False
bool2_str = json.dumps(bool2)
print(bool2_str) #false

none1 = None
none1_str = json.dumps(none1)
print(none1_str) #null

===============-----------------===================--------------

Example : Convert python obect to JSON file
import json

person_dict = {'name': 'Bob', 'age': 12, 'married': False, 'children': None, 'car' : None, 'student':True}
with open(file='dict1.json', mode='w') as file1:
    json.dump(person_dict, file1)

number_list = [1, 2, 3]
with open(file='list1.json', mode='w') as file2:
    json.dump(number_list, file2)

number_tuple = (1, 5, 3)
with open(file='tuple1.json', mode='w') as file3:
    json.dump(number_tuple, file3)

number = 12
with open(file='number1.json', mode='w') as file4:
    json.dump(number, file4)

name = 'emexo'
with open(file='name1.json', mode='w') as file5:
    json.dump(name, file5)

bool1 = True
with open(file='bool1.json', mode='w') as file6:
    json.dump(bool1, file6)

bool2 = False
with open(file='bool2.json', mode='w') as file7:
    json.dump(bool2, file7)

none1 = None
with open(file='none1.json', mode='w') as file8:
    json.dump(none1, file8) 

===============-----------------===================--------------
Parse JSON in Python
The json module makes it easy to parse JSON strings and files containing JSON object.

Example : Python JSON to dict  --  can parse a JSON string using json.loads() method.

import json
#person_str = '{"name": "Bob", "age": 12, "married": false, "children": null, "car": null, "student": true}'
person_str = '{"name": "Bob", "age": 42, "married": true, "children": ["sonu", "tonu"], "car": ["swift", "wagonR"], "student": false}'
person_dict = json.loads(person_str)
print(person_dict) # {'name': 'Bob', 'age': 42, 'married': True, 'children': ['sonu', 'tonu'], 'car': ['swift', 'wagonR'], 'student': False}
print(person_dict['married']) # True

number_list_str = '[1, 2, 3]'
print(type(json.loads(number_list_str))) # <class 'list'>
print(json.loads(number_list_str)) # [1, 2, 3]

number_str = '12.5'  #12 below line gives int <class 'int'>
print(type(json.loads(number_str))) # <class 'float'>
print(json.loads(number_str)) # 12.5

name_str = '"emexo"'  #  alone giving 'emexo' will throw error
print(json.loads(name_str)) # emexo
print(type(json.loads(name_str))) # <class 'str'>

bool1_str = 'true'
print(type(json.loads(bool1_str))) # <class 'bool'>
print(json.loads(bool1_str)) # True

bool2_str = 'false'
print(type(json.loads(bool2_str))) # <class 'bool'>
print(json.loads(bool2_str)) # False

null_str = 'null'
print(type(json.loads(null_str))) # <class 'NoneType'>
print(json.loads(null_str)) # None


Example 2: Python read JSON file  --  can use json.load() method to read a file containing JSON object.

import json

with open(file='dict1.json', mode='r') as file1:
    dict1=json.load(file1)
print("python dict from json file ", dict1)

with open(file='list1.json', mode='r') as file2:
    list1 = json.load(file2)
print("python list1 from json file ", list1)

with open(file='tuple1.json', mode='r') as file3:
    tuple1 = json.load(file3)
print("python tuple1 from json file ", tuple1)

with open(file='number1.json', mode='r') as file4:
    number = json.load(file4)
print("python number from json file ", number)

with open(file='name1.json', mode='r') as file5:
    name = json.load(file5)
print("python name from json file ", name)

bool1 = True
with open(file='bool1.json', mode='r') as file6:
    bool1 = json.load(file6)
print("python bool1 from json file ", bool1)

with open(file='bool2.json', mode='r') as file7:
    bool2 = json.load(file7)
print("python bool2 from json file ", bool2)

with open(file='none1.json', mode='r') as file8:
    none1 = json.load(file8)
print("python none from json file ", none1)
