PyTest Testdata Parameter Passing Marker, Fixture 
Mark: https://docs.pytest.org/en/6.2.x/parametrize.html
Fixture: https://docs.pytest.org/en/6.2.x/fixture.html#fixture-parametrize

pytest enables test parametrization at several levels:

1. pytest.fixture() allows one to parametrize fixture functions.
2. @pytest.mark.parametrize allows one to define multiple sets of arguments and fixtures at the test function or class.
3. pytest_generate_tests allows one to define custom parametrization schemes or extensions.

@pytest.mark.parametrize: parametrizing test functions
The builtin pytest.mark.parametrize decorator enables parametrization of arguments for a test function. 
Here is a typical example of a test function that implements checking that a certain input leads to an expected output:
# content of test_expectation.py
import pytest

@pytest.mark.parametrize("test_input,expected", [("3+5", 8), ("2+4", 6), ("6*9", 42)])
def test_eval1(test_input, expected):
    assert eval(test_input) == expected


pytest by default escapes any non-ascii characters used in unicode strings for the parametrization because it has several downsides. 
If however you would like to use unicode strings in parametrization and see them in the terminal as is (non-escaped), use this option in your pytest.ini:
[pytest]
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = True


# It is also possible to mark individual test instances within parametrize, for example with the builtin mark.xfail:
import pytest


@pytest.mark.parametrize(
    "test_input,expected",
    [("3+5", 8), ("2+4", 6), pytest.param("6*9", 42, marks=pytest.mark.xfail)],
)
def test_eval2(test_input, expected):
    assert eval(test_input) == expected
#The one parameter set which caused a failure previously now shows up as an “xfailed” (expected to fail) test.



import pytest

@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):
    print(x,y)

This will run the test with the arguments set to x=0/y=2, x=1/y=2, x=0/y=3, and x=1/y=3 exhausting parameters in the order of the decorators.

practise with selenium code, like passing url and expected title as parameter



